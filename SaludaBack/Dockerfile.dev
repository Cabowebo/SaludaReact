# Usar imagen oficial de PHP 8.2 con Apache para desarrollo
FROM php:8.2-apache

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libzip-dev \
    zip \
    unzip \
    nodejs \
    npm \
    supervisor \
    && docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd zip \
    && a2enmod rewrite \
    && a2enmod headers

# Instalar Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Establecer directorio de trabajo
WORKDIR /var/www/html

# Copiar archivos de configuración
COPY docker/php.ini /usr/local/etc/php/
COPY docker/apache.conf /etc/apache2/sites-available/000-default.conf
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Copiar composer.json y composer.lock
COPY composer*.json ./

# Copiar código fuente (necesario para artisan)
COPY . .

# Instalar dependencias de PHP (incluyendo dev)
RUN composer install --optimize-autoloader --no-interaction

# Copiar package.json y package-lock.json (si existen)
COPY package*.json ./

# Instalar dependencias de Node.js (si existen)
RUN if [ -f package.json ]; then npm install; fi

# Crear directorios necesarios y establecer permisos
RUN mkdir -p storage/framework/{sessions,views,cache} \
    && mkdir -p storage/logs \
    && mkdir -p bootstrap/cache \
    && chown -R www-data:www-data storage bootstrap/cache \
    && chmod -R 775 storage bootstrap/cache

# Generar clave de aplicación si no existe
RUN if [ ! -f .env ]; then cp .env.example .env; fi
RUN php artisan key:generate --no-interaction

# Configurar Apache para usar puerto 8000
RUN sed -i 's/Listen 80/Listen 8000/' /etc/apache2/ports.conf

# Exponer puerto
EXPOSE 8000

# Comando de inicio para desarrollo
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"] 